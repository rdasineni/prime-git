public void generateTfScores(String dirPath, String countries) throws IOException {
		try {
			wordsList = new ArrayList<>();
			TextDirectoryLoader loader = new TextDirectoryLoader();
			loader.setDirectory(new File(dirPath));
			Instances dataRaw = loader.getDataSet();
			StringToWordVector filter = new StringToWordVector();
			filter.setInputFormat(dataRaw);
			filter.setLowerCaseTokens(true);
			filter.setMinTermFreq(0);
			filter.setTFTransform(true);
			filter.setWordsToKeep(100000);
			filter.setOutputWordCounts(true);
			NGramTokenizer tokenizer = new NGramTokenizer();
			tokenizer.setNGramMinSize(Integer.parseInt(nGramMinSize));
			tokenizer.setNGramMaxSize(Integer.parseInt(nGramMaxSize));
			filter.setTokenizer(tokenizer);
			filter.doNotOperateOnPerClassBasisTipText();
			Instances dataFiltered = Filter.useFilter(dataRaw, filter);
			/*
			FileWriter fw = new FileWriter(tfqueryarff);
			fw.write(dataFiltered.toString());
			fw.close();
			*/
			for (int instIdx = 0; instIdx < dataFiltered.numInstances(); instIdx++) {
				Instance currInst = dataFiltered.instance(instIdx);
				for (int attrIdx = 0; attrIdx < dataFiltered.numAttributes(); attrIdx++) {
					Attribute currAttr = currInst.attribute(attrIdx);
					if (currAttr.isNominal()) {
					} else if (currAttr.isNumeric()) {
						double ss = currInst.value(currAttr.index());
						String sss = Double.toString(ss);
						if (!sss.equals("0.0")) {
							String bag_word = currAttr.name();
							queryTf.put(bag_word, currInst.value(currAttr.index()));							
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	-----------------private void queryToDocument(String query, String dirPath2) {
		File file = new File(dirPath + "/query.txt");
		try (FileWriter fileWriter = new FileWriter(file)) {
			query = query.toLowerCase();
			if ((query.indexOf("full form") != -1) || (query.indexOf("abbrev") != -1)) {
				query = query.replaceAll("full form", "");
				query = Stopwords.removeStopWords(query, stopwords);
				query = Stopwords.removeNoicedata(query);
				query = Stopwords.removeStemmedStopWords(query);
				logger.info("Cleaned query ::  " + query);
				// commented as per ravi said. Dt:30/09/2019
				
				 //StringJoiner words = getAbsandSynonyms(new StringTokenizer(query)); 
				 //query =words.toString();
				
			}
			// query=query+" "+getClassificationData(new StringTokenizer(query));
			query = Stopwords.removeStopWords(query, stopwords);
			query = Stopwords.removeNoicedata(query);
			query = Stopwords.removeStemmedStopWords(query);
			StringTokenizer st1 = new StringTokenizer(query);
			wordCount = st1.countTokens();
			if (wordCount == 2) {
				query = query + "abcdxyz";
			}
			query = query.trim();
			fileWriter.write(query);
			fileWriter.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
